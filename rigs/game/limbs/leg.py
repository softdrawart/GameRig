import bpy
import math

from rigify.rigs.limbs.leg import Rig as leg
from rigify.rigs.limbs.leg import create_sample as orig_create_sample
from rigify.base_rig import stage
from rigify.utils.naming import make_derived_name
from rigify.utils.bones import put_bone
from rigify.utils.rig import is_rig_base_bone
from rigify.rigs.widgets import create_ball_socket_widget, create_foot_widget
from rigify.utils.widgets import adjust_widget_transform_mesh, adjust_widget_axis
from mathutils import Matrix, Vector

from .limb_rigs import BaseLimbRig

class Rig(BaseLimbRig, leg):
    ik_toe_spin: str
    org_ik_toe_spin: str
    
    def find_org_bones(self, bone):
        bones = super().find_org_bones(bone)
        #find Toe roll bone

        for b in self.get_bone(bones.main[3]).bone.children:
            if not b.use_connect and not b.children and not is_rig_base_bone(self.obj, b.name):
                self.org_ik_toe_spin = b.name
                break
            else:
                self.raise_error("Toe Roll bone not found.")

        return bones


    @stage.generate_bones
    def make_heel_control_bone(self):
        super().make_heel_control_bone()
        self.ik_toe_spin = self.make_ik_toe_spin_bone(self.bones.org.main)
        
    def make_ik_toe_spin_bone(self, orgs: list[str]):
        org = self.org_ik_toe_spin
        name = self.copy_bone(org, make_derived_name(org, 'ctrl', '_spin_ik'))
        #put_bone(self.obj, name, self.get_bone(org).tail, scale=0.5)
        return name
        
    @stage.parent_bones
    def parent_heel_control_bone(self):
        super().parent_heel_control_bone()
        self.parent_ik_toe_spin_bone()

    def parent_ik_toe_spin_bone(self):
        if self.pivot_type == 'ANKLE_TOE':
            self.set_bone_parent(self.ik_toe_spin, self.get_ik_control_output())
            self.set_bone_parent(self.bones.ctrl.ik_spin, self.ik_toe_spin)
        else:
            self.set_bone_parent(self.ik_toe_spin, self.get_ik_control_output())
            self.set_bone_parent(self.bones.ctrl.heel, self.ik_toe_spin)

    @stage.generate_widgets
    def make_ik_toe_spin_control_widget(self):
        obj = create_ball_socket_widget(self.obj, self.ik_toe_spin, size=0.75)

    def make_ik_ctrl_widget(self, ctrl):
        obj = create_foot_widget(self.obj, ctrl)

        if self.pivot_type != 'TOE':
            ctrl = self.get_bone(ctrl)
            org = self.get_bone(self.bones.org.main[2])
            offset = (org.tail - (ctrl.custom_shape_transform or ctrl).head) - Vector((0,0,org.tail[2]))
            adjust_widget_transform_mesh(obj, Matrix.Translation(offset))

def create_sample(obj):  # noqa
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('thigh.L')
    bone.head = 0.0980, 0.0124, 1.0720
    bone.tail = 0.0980, -0.0286, 0.5372
    bone.roll = 0.0000
    bone.use_connect = False
    bones['thigh.L'] = bone.name
    bone = arm.edit_bones.new('shin.L')
    bone.head = 0.0980, -0.0286, 0.5372
    bone.tail = 0.0980, 0.0162, 0.0852
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['thigh.L']]
    bones['shin.L'] = bone.name
    bone = arm.edit_bones.new('foot.L')
    bone.head = 0.0980, 0.0162, 0.0852
    bone.tail = 0.0980, -0.0934, 0.0167
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['shin.L']]
    bones['foot.L'] = bone.name
    bone = arm.edit_bones.new('toe.L')
    bone.head = 0.0980, -0.0934, 0.0167
    bone.tail = 0.0980, -0.1606, 0.0167
    bone.roll = -0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['foot.L']]
    bones['toe.L'] = bone.name
    bone = arm.edit_bones.new('heel.L')
    bone.head = 0.0600, 0.0459, 0.0000
    bone.tail = 0.1400, 0.0459, 0.0000
    bone.roll = 0.0000
    bone.use_connect = False
    bone.parent = arm.edit_bones[bones['foot.L']]
    bones['heel.L'] = bone.name
    bone = arm.edit_bones.new('toe_roll.L')
    bone.head = 0.0980, -0.1880, -0.0020
    bone.tail = 0.0980, -0.1895, 0.0652
    bone.roll = -3.1416
    bone.use_connect = False
    bone.parent = arm.edit_bones[bones['toe.L']]
    bones['toe_roll.L'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['thigh.L']]
    pbone.rigify_type = 'game.limbs.leg'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    try:
        pbone.rigify_parameters.limb_type = 'leg'
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.extra_ik_toe = True
    except AttributeError:
        pass
    try:
        pbone.rigify_parameters.ik_local_location = False
    except AttributeError:
        pass
    pbone = obj.pose.bones[bones['shin.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['foot.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['toe.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['heel.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['toe_roll.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        bone.bbone_x = bone.bbone_z = bone.length * 0.05
        arm.edit_bones.active = bone
        if bcoll := arm.collections.active:
            bcoll.assign(bone)
    

    return bones
